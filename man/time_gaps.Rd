% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/time_gaps.R
\name{time_gaps}
\alias{time_gaps}
\alias{time_num_gaps}
\alias{time_has_gaps}
\title{Check for missing dates or datetimes}
\usage{
time_gaps(
  x,
  time_by = NULL,
  time_type = c("auto", "duration", "period"),
  check_regular = TRUE,
  na.rm = TRUE
)

time_num_gaps(
  x,
  time_by = NULL,
  time_type = c("auto", "duration", "period"),
  check_regular = TRUE,
  na.rm = TRUE
)

time_has_gaps(
  x,
  time_by = NULL,
  time_type = c("auto", "duration", "period"),
  check_regular = TRUE,
  na.rm = TRUE
)
}
\arguments{
\item{x}{A date, datetime or numeric vector.}

\item{time_by}{Time unit. \cr
Must be one of the three:
\itemize{
\item string, specifying either the unit or the number and unit, e.g
\code{time_by = "days"} or \code{time_by = "2 weeks"}
\item named list of length one, the unit being the name, and
the number the value of the list, e.g. \code{list("days" = 7)}.
For the vectorized time functions, you can supply multiple values,
e.g. \code{list("days" = 1:10)}.
\item Numeric vector. If time_by is a numeric vector and x is not a date/datetime,
then arithmetic is used, e.g \code{time_by = 1}.
}}

\item{time_type}{Time type, either "auto", "duration" or "period".
With larger data, it is recommended to use \code{time_type = "duration"} for
speed and efficiency.}

\item{check_regular}{Should a check be done to see whether x is a regular
sequence given a specified \code{time_by} unit?
Default is \code{TRUE}.
The check only occurs when \code{time_by} is supplied.}

\item{na.rm}{Should \code{NA} values be removed? Default is \code{TRUE}.}
}
\description{
\code{time_gaps()} checks for missing gaps in time for any
regular date or datetime sequence.
}
\details{
If you know your data is regular and you know the time unit,
it is more efficient to set \code{check_regular = FALSE} and supply the time unit
in \code{time_by}.
}
\examples{
library(timeplyr)
library(dplyr)
library(lubridate)
library(nycflights13)

missing_dates(flights$time_hour)
time_has_gaps(flights$time_hour)
time_num_gaps(flights$time_hour)
time_gaps(flights$time_hour)

# Number of missing hours by origin and dest
flights \%>\%
  group_by(origin, dest) \%>\%
  summarise(n_missing = time_num_gaps(time_hour, "hours"))
}
