% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/growid.R
\name{growid}
\alias{growid}
\alias{gseq_len}
\title{Fast grouped row numbers}
\usage{
growid(x, g = x, ascending = TRUE)

gseq_len(length, g = NULL)
}
\arguments{
\item{x}{A vector or data frame.}

\item{g}{Group IDs passed directly to \code{collapse::GRP()}.
This can be a vector, list or data frame.}

\item{ascending}{When \code{ascending = TRUE} the row IDs are in
increasing order. When \code{ascending = FALSE} the row IDs are in
decreasing order.}

\item{length}{Sequence length.}
}
\value{
An integer vector of row IDs
or double if \code{length > .Machine$integer.max}
If \code{x} is a vector, a vector \code{length(x)} will be returned.\cr
If \code{x} is a data frame, a vector \code{nrow(x)} will be returned.\cr
If \code{x} is a list, a vector \code{unique(lengths(x))} will be returned as
long as the number of unique lengths is \verb{<= 1}.
}
\description{
\code{growid()} is like \code{data.table::rowid()} but uses
\code{collapse} for the grouping and allows you to specify the
grouping structure. \cr
\code{gseq_len()}is the same but accepts similar arguments to \code{seq_len()} with
an additional group argument. \cr
Both produce the same thing, namely a running integer sequence for
each group that increments by 1 and starts at 1. \cr
This is most useful for calculating row numbers. \cr
}
\examples{
library(timeplyr)
library(dplyr)
library(data.table)
library(nycflights13)

# Simple row numbers
growid(flights, g = NULL)
# Row numbers by origin
growid(flights, g = flights$origin)

# Fast duplicate rows
growid(flights) > 1

# On vectors, this is like base::seq_len()
growid(flights$year, g = NULL)

# Comparison to rowidv()
all.equal(rowidv(flights),
          growid(flights))

# Comparison to dplyr
flights \%>\%
  mutate(id1 = row_number(),
         .by = c(origin, dest)) \%>\%
  mutate(id2 = growid(pick(origin, dest))) \%>\%
  filter(id1 != id2)

flights \%>\%
  mutate(id1 = row_number(),
         .by = c(origin, dest)) \%>\%
  add_group_id(origin, dest) \%>\%
  mutate(id2 = gseq_len(nrow(.), g = group_id)) \%>\%
  filter(id1 != id2)
}
