% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/time_missing.R
\name{time_missing}
\alias{time_missing}
\alias{missing_dates}
\alias{n_missing_dates}
\alias{n_time_missing}
\title{Check for missing dates or datetimes}
\usage{
time_missing(x, time_by = NULL, na.rm = TRUE)

missing_dates(x, na.rm = TRUE)

n_missing_dates(x, na.rm = TRUE)

n_time_missing(x, time_by = NULL, na.rm = TRUE)
}
\arguments{
\item{x}{A date or datetime vector, list, or data frame.}

\item{time_by}{Must be one of the three:
\itemize{
\item string, specifying either the unit or the number and unit, e.g
\code{time_by = "days"} or \code{time_by = "2 weeks"}
\item named list of length one, the unit being the name, and
the number the value of the list, e.g. \code{list("days" = 7)}.
For the vectorized time functions, you can supply multiple values,
e.g. \code{list("days" = 1:10)}.
\item Numeric vector. If time_by is a numeric vector and x is not a date/datetime,
then arithmetic is used, e.g \code{time_by = 1}.
}}

\item{na.rm}{Should \code{NA} values be removed? Default is \code{TRUE}.}
}
\description{
\code{missing_dates()} returns missing dates between
the first and last date of a date/datetime vector.

\code{time_missing()} checks for missing gaps in time for any date or datetime
sequence, and so is more general. Specify the time unit increment
through \code{time_by}.
}
\examples{
library(timeplyr)
library(dplyr)
library(lubridate)
library(nycflights13)

missing_dates(flights$time_hour)
time_missing(flights$time_hour)
time_missing(flights$time_hour, "hours")

# Missing dates by origin and dest
flights \%>\%
  mutate(date = as_date(time_hour)) \%>\%
  group_by(origin, dest) \%>\%
  summarise(n_missing = n_missing_dates(date))
}
