% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/time_cut.R
\name{time_cut}
\alias{time_cut}
\alias{time_breaks}
\title{Cut dates and datetimes into regularly spaced date or datetime intervals}
\usage{
time_cut(
  x,
  n = 5,
  time_by = NULL,
  from = NULL,
  to = NULL,
  fmt = NULL,
  time_floor = FALSE,
  week_start = getOption("lubridate.week.start", 1),
  n_at_most = TRUE,
  as_factor = TRUE,
  time_type = c("auto", "duration", "period"),
  roll_month = "preday",
  roll_dst = "pre",
  by = NULL,
  seq_type = NULL,
  floor_date = NULL
)

time_breaks(
  x,
  n = 5,
  time_by = NULL,
  from = NULL,
  to = NULL,
  time_floor = FALSE,
  week_start = getOption("lubridate.week.start", 1),
  n_at_most = TRUE,
  time_type = c("auto", "duration", "period"),
  roll_month = "preday",
  roll_dst = "pre",
  by = NULL,
  seq_type = NULL,
  floor_date = NULL
)
}
\arguments{
\item{x}{A date/datetime.}

\item{n}{The minimum number of breaks.}

\item{time_by}{Must be one of the three:
\itemize{
\item string, specifying either the unit or the number and unit, e.g
\code{time_by = "days"} or \code{time_by = "2 weeks"}
\item named list of length one, the unit being the name, and
the number the value of the list, e.g. \code{list("days" = 7)}.
For the vectorized time functions, you can supply multiple values,
e.g. \code{list("days" = 1:10)}.
\item Numeric vector. If time_by is a numeric vector and x is not a date/datetime,
then arithmetic is used, e.g \code{time_by = 1}.
}}

\item{from}{Time series start date.}

\item{to}{Time series end date.}

\item{fmt}{(Optional) Date/datetime format for the factor labels.
If supplied, this is passed to \code{format()}.}

\item{time_floor}{Logical. Should the initial date/datetime be
floored before building the sequence?}

\item{week_start}{day on which week starts following ISO conventions - 1
means Monday (default), 7 means Sunday.
This is only used when \code{floor_date = TRUE}.}

\item{n_at_most}{Logical. If \code{TRUE} then n breaks at most are returned,
otherwise at least n breaks are returned.}

\item{as_factor}{Logical. If \code{TRUE} the output is an ordered factor.
Setting this to \code{FALSE} is sometimes much faster.}

\item{roll_month}{Control how impossible dates are handled when
month or year arithmetic is involved.
Options are "preday", "boundary", "postday", "full" and "NA".
See \code{?timechange::time_add} for more details.}

\item{roll_dst}{See \code{?timechange::time_add} for the full list of details.}

\item{by}{\bold{Deprecated}. Use \code{time_by} instead}

\item{seq_type}{\bold{Deprecated}. Use \code{time_type} instead.}

\item{floor_date}{\bold{Deprecated}. Use \code{time_floor} instead.}

\item{timetype}{If "auto", \code{periods} are used for
the time expansion when days, weeks, months or years are specified,
and \code{durations} are used otherwise.}
}
\description{
\code{time_cut()} is very useful for plotting with dates and datetimes
and always returns breaks of regular width. \cr
To specify exact widths, similar to \code{ggplot2::cut_width()},
supply \code{time_by} and \code{n = Inf}. \cr
\code{time_breaks()} is a helper that
returns only the time breaks.

By default \code{time_cut()} will try to find
the prettiest way of cutting the interval by
trying to cut the date/datetimes into
groups of the highest possible time units,
starting at years and ending at milliseconds.
If \code{n_at_most = TRUE} then \verb{<= n} groups are calculated,
otherwise \verb{>= n} groups
are calculated.
}
\examples{
library(timeplyr)
library(lubridate)
library(ggplot2)
library(dplyr)

# Easily create custom time breaks
flights <- nycflights13::flights \%>\%
  fslice_sample(n = 10^3, seed = 8192821) \%>\%
  select(time_hour) \%>\%
  mutate(date = as_date(time_hour))

# time_cut() and time_breaks() automatically find a
# suitable way to cut the data
time_cut(flights$date)
# Works with datetimes as well
time_cut(flights$time_hour, n = 5) # 5 breaks
# Custom formatting
time_cut(flights$date, fmt = "\%Y \%b", time_by = "month")
time_cut(flights$time_hour, fmt = "\%Y \%b", time_by = "month")
# Just the breaks
time_breaks(flights$date, n = 5, time_by = "month")
time_breaks(flights$time_hour, n = 5, time_by = "month")

# To get exact breaks at regular intervals, use time_expandv
weekly_breaks <- time_expandv(flights$date,
                              time_by = "5 weeks",
                              week_start = 1, # Monday
                              time_floor = TRUE)
weekly_labels <- format(weekly_breaks, "\%b-\%d")
flights \%>\%
  time_count(time = date, time_by = "week") \%>\%
  ggplot(aes(x = date, y = n)) +
  geom_bar(stat = "identity") +
  scale_x_date(breaks = weekly_breaks,
               labels = weekly_labels)
}
