% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/unique_groups.R
\name{unique_groups}
\alias{unique_groups}
\title{Alternative to \code{dplyr::group_keys()}}
\usage{
unique_groups(data, ..., order = TRUE, sort = order, .by = NULL)
}
\arguments{
\item{data}{Data frame.}

\item{...}{Additional groups using tidy \code{data-masking} rules. \cr
To specify groups using \code{tidyselect}, simply use the \code{.by} argument.}

\item{order}{Should the groups be ordered?
\bold{THE PHYSICAL ORDER OF THE DATA IS NOT CHANGED.} \cr
When order is \code{TRUE} (the default) the group IDs will be ordered but not sorted.
If \code{FALSE} the order of the group IDs will be based on first appearance.}

\item{sort}{Should the data frame be sorted by the groups?}

\item{.by}{Alternative way of supplying groups using \code{tidyselect} notation.
This is kept to be consistent with other functions.}
}
\description{
This works like \code{dplyr::group_keys()} but offers more
flexibility in how the groups are ordered/sorted.
It is similar to \code{dplyr::distinct()} but the result is never grouped.
}
\examples{
library(timeplyr)
library(dplyr)
iris \%>\%
  group_by(Species) \%>\%
  unique_groups()
iris \%>\%
  fslice_sample(seed = 920) \%>\%
  unique_groups(.by = Species, order = FALSE)
iris \%>\%
  unique_groups(across(contains("width"), round))
}
