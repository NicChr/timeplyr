% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fcount.R
\name{fcount}
\alias{fcount}
\alias{fadd_count}
\title{A fast replacement to dplyr::count()}
\usage{
fcount(data, ..., wt = NULL, sort = FALSE, name = NULL, .by = NULL)

fadd_count(
  data,
  ...,
  wt = NULL,
  sort = FALSE,
  name = NULL,
  .by = NULL,
  keep_class = TRUE
)
}
\arguments{
\item{data}{A data frame.}

\item{...}{Variables to group by.}

\item{wt}{Frequency weights.
Can be \code{NULL} or a variable:
\itemize{
\item If \code{NULL} (the default), counts the number of rows in each group.
\item If a variable, computes \code{sum(wt)} for each group.
}}

\item{sort}{If \code{TRUE}, will s how the largest groups at the top.}

\item{name}{The name of the new column in the output.
If there's already a column called \code{n},
it will use \code{nn}.
If there's a column called \code{n} and \code{n}n,
it'll use \code{nnn}, and so on, adding \code{n}s until it gets a new name.}

\item{.by}{(Optional). A selection of columns to group by for this operation.
Columns are specified using tidy-select.}

\item{keep_class}{Logical. If \code{TRUE} then the class of the input data is retained.
If \code{FALSE}, which is sometimes faster, a \code{data.table} is returned.}
}
\description{
This is a fast and near-identical alternative to dplyr::count() using the \code{collapse} package.
Unlike \code{collapse::fcount()}, this works very similarly to \code{dplyr::count()}.
The only main difference is that anything supplied to \code{wt}
is recycled and added as a data variable.
Other than that everything works exactly as the dplyr equivalent.

\code{fcount()} and \code{fadd_count()} can be up to >100x faster than the dplyr equivalents.
\code{collapse} and \code{data.table} are used for computing, adding the count column
and optionally sorting.
}
\examples{
library(timeplyr)
library(dplyr)
iris \%>\%
  fcount()
iris \%>\%
  fadd_count()
iris \%>\%
  group_by(Species) \%>\%
  fcount()
iris \%>\%
  fcount(across(where(is.numeric), mean))
iris \%>\%
  fadd_count(across(where(is.numeric), mean))
iris \%>\%
  fadd_count(Species,
             keep_class = FALSE) # Data.table result
}
